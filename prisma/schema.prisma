// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  fullname      String
  email         String   @unique
  password      String
  phone         String?
  loginAttempt  Int      @default(0)
  blocked       Boolean  @default(false)
  refreshToken  String?
  otp           OTP[]
  image         String?  @unique
  userName      String?  @unique
  isActive      Boolean  @default(true)
  address       Address[]
  socials       Socials?
  oauthAccounts OAuthAccount[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model OTP {
  id        String   @id @default(cuid())
  code      String
  expiry    DateTime
  email     String   @unique
  user      User     @relation(fields: [email], references: [email])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Socials {
  id        String   @id @default(cuid())
  facebook  String?
  twitter   String?
  instagram String?
  linkedin  String?
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OAuthAccount {
  id                String   @id @default(cuid())
  provider          String
  providerAccountId String
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id        String   @id @default(cuid())
  sessionToken String @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}